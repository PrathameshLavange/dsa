#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

struct Node {
    string keyword, meaning;
    Node* left;
    Node* right;
    int height;
};

Node* root = nullptr;

int height(Node* n) {
    return n ? n->height : 0;
}

int getBalance(Node* n) {
    return n ? height(n->left) - height(n->right) : 0;
}

Node* rotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    return x;
}

Node* rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    return y;
}

Node* insert(Node* node, string key, string meaning) {
    if (!node) {
        Node* temp = new Node{key, meaning, nullptr, nullptr, 1};
        return temp;
    }

    if (key < node->keyword)
        node->left = insert(node->left, key, meaning);
    else if (key > node->keyword)
        node->right = insert(node->right, key, meaning);
    else {
        node->meaning = meaning;
        return node;
    }

    node->height = 1 + max(height(node->left), height(node->right));

    int balance = getBalance(node);

    if (balance > 1 && key < node->left->keyword)
        return rotateRight(node);
    if (balance < -1 && key > node->right->keyword)
        return rotateLeft(node);
    if (balance > 1 && key > node->left->keyword) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }
    if (balance < -1 && key < node->right->keyword) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }

    return node;
}

Node* minValueNode(Node* node) {
    while (node->left)
        node = node->left;
    return node;
}

Node* deleteNode(Node* node, string key) {
    if (!node) return node;

    if (key < node->keyword)
        node->left = deleteNode(node->left, key);
    else if (key > node->keyword)
        node->right = deleteNode(node->right, key);
    else {
        if (!node->left || !node->right) {
            Node* temp = node->left ? node->left : node->right;
            delete node;
            return temp;
        }
        Node* temp = minValueNode(node->right);
        node->keyword = temp->keyword;
        node->meaning = temp->meaning;
        node->right = deleteNode(node->right, temp->keyword);
    }

    node->height = 1 + max(height(node->left), height(node->right));

    int balance = getBalance(node);

    if (balance > 1 && getBalance(node->left) >= 0)
        return rotateRight(node);
    if (balance > 1 && getBalance(node->left) < 0) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }
    if (balance < -1 && getBalance(node->right) <= 0)
        return rotateLeft(node);
    if (balance < -1 && getBalance(node->right) > 0) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }

    return node;
}

void inorder(Node* node) {
    if (node) {
        inorder(node->left);
        cout << node->keyword << " : " << node->meaning << endl;
        inorder(node->right);
    }
}

void reverseOrder(Node* node) {
    if (node) {
        reverseOrder(node->right);
        cout << node->keyword << " : " << node->meaning << endl;
        reverseOrder(node->left);
    }
}

bool search(Node* node, string key, int& comparisons) {
    if (!node) return false;
    comparisons++;
    if (key == node->keyword) return true;
    if (key < node->keyword)
        return search(node->left, key, comparisons);
    else
        return search(node->right, key, comparisons);
}

int main() {
    int choice;
    string key, meaning;

    do {
        cout << "\n1. Add/Update Keyword\n2. Delete Keyword\n3. Display Ascending\n4. Display Descending\n5. Search Keyword\n6. Max Comparisons\n7. Exit\nChoice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter keyword: ";
                cin >> key;
                cout << "Enter meaning: ";
                cin.ignore();
                getline(cin, meaning);
                root = insert(root, key, meaning);
                break;

            case 2:
                cout << "Enter keyword to delete: ";
                cin >> key;
                root = deleteNode(root, key);
                break;

            case 3:
                cout << "\nDictionary in Ascending Order:\n";
                inorder(root);
                break;

            case 4:
                cout << "\nDictionary in Descending Order:\n";
                reverseOrder(root);
                break;

            case 5:
                cout << "Enter keyword to search: ";
                cin >> key;
                {
                    int comparisons = 0;
                    if (search(root, key, comparisons))
                        cout << "Keyword found with " << comparisons << " comparisons.\n";
                    else
                        cout << "Keyword not found after " << comparisons << " comparisons.\n";
                }
                break;

            case 6:
                cout << "Maximum comparisons needed: " << height(root) << endl;
                break;

            case 7:
                break;

            default:
                cout << "Invalid choice!";
        }
    } while (choice != 7);

    return 0;
}
 
1