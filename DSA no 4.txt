Beginning with an empty binary search tree, Construct binary
search tree by inserting the values in the order given.
After constructing a binary tree -
● Insert new node
● Find number of nodes in longest path from root
● Minimum data value found in the tree
● Change a tree so that the roles of the left and
right pointers are swapped at every node
● Search a value
#include <iostream>
using namespace std;

// Node structure to represent each tree node
struct Node {
    int data;       // Value stored in the node
    Node *left, *right;  // Pointers to left and right children

    // Constructor to initialize the node
    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

// Function to insert a new value into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);  // Create a new node if the tree is empty
    }
    if (value < root->data) {
        root->left = insert(root->left, value);  // Insert in left subtree if value is smaller
    } else {
        root->right = insert(root->right, value);  // Insert in right subtree if value is greater
    }
    return root;
}

// Function for inorder traversal (left-root-right)
void inorder(Node* root) {
    if (root != nullptr) {
        inorder(root->left);  // Visit left child
        cout << root->data << " ";  // Print the current node's value
        inorder(root->right);  // Visit right child
    }
}

// Function to search for a value in the BST
Node* search(Node* root, int value) {
    if (root == nullptr || root->data == value) {
        return root;  // Return the node if found or null if not found
    }
    if (value < root->data) {
        return search(root->left, value);  // Search in left subtree
    }
    return search(root->right, value);  // Search in right subtree
}

// Function to find the minimum value in the tree
Node* findMin(Node* root) {
    while (root && root->left != nullptr) {
        root = root->left;  // Keep going left until we find the minimum
    }
    return root;
}

// Function to delete a node from the BST
Node* deleteNode(Node* root, int value) {
    if (root == nullptr) {
        return root;  // If the tree is empty, nothing to delete
    }

    if (value < root->data) {
        root->left = deleteNode(root->left, value);  // Move to the left subtree
    } else if (value > root->data) {
        root->right = deleteNode(root->right, value);  // Move to the right subtree
    } else {
        // Node to be deleted is found
        if (root->left == nullptr) {
            Node* temp = root->right;
            delete root;
            return temp;  // Return the right child to bypass the current node
        } else if (root->right == nullptr) {
            Node* temp = root->left;
            delete root;
            return temp;  // Return the left child to bypass the current node
        }

        // If the node has two children, get the smallest value in the right subtree
        Node* temp = findMin(root->right);
        root->data = temp->data;  // Replace the node's data with the smallest value
        root->right = deleteNode(root->right, temp->data);  // Delete the smallest node
    }
    return root;
}

// Function to calculate the height of the tree
int height(Node* root) {
    if (root == nullptr) {
        return -1;  // Height of empty tree is -1
    }
    int leftHeight = height(root->left);  // Height of left subtree
    int rightHeight = height(root->right);  // Height of right subtree
    return 1 + max(leftHeight, rightHeight);  // Return the maximum height plus 1
}

int main() {
    Node* root = nullptr;  // Start with an empty tree
    int choice, value;

    while (true) {
        cout << "\n1. Insert\n2. Delete\n3. Search\n4. Inorder Traversal\n5. Height\n6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:  // Insert
                cout << "Enter value to insert: ";
                cin >> value;
                root = insert(root, value);
                break;
            case 2:  // Delete
                cout << "Enter value to delete: ";
                cin >> value;
                root = deleteNode(root, value);
                break;
            case 3:  // Search
                cout << "Enter value to search: ";
                cin >> value;
                if (search(root, value)) {
                    cout << "Value found in the tree.\n";
                } else {
                    cout << "Value not found in the tree.\n";
                }
                break;
            case 4:  // Inorder Traversal
                cout << "Inorder Traversal: ";
                inorder(root);
                cout << endl;
                break;
            case 5:  // Height
                cout << "Height of tree: " << height(root) << endl;
                break;
            case 6:  // Exit
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    }
}
